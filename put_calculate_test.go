// SPDX-FileCopyrightText: 2018 Joern Barthel <joern.barthel@kreuzwerker.de>
// SPDX-License-Identifier: Apache-2.0

package ykoath

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestPutAndCalculateTestVector(t *testing.T) {
	tt := []struct {
		Name  string
		Query string
	}{
		{
			"full identifier",
			"testvector",
		},
		{
			"name only (substring)",
			"test",
		},
	}

	for _, test := range tt {
		t.Run(test.Name, func(t *testing.T) {
			var (
				assert   = assert.New(t)
				testCard = new(testCard)
			)

			testCard.
				On(
					"Transmit",
					[]byte{
						0x00, 0x01, 0x00, 0x00, 0x24, 0x71, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x76,
						0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x16, 0x21, 0x08, 0x31, 0x32, 0x33,
						0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
						0x36, 0x37, 0x38, 0x39, 0x30,
					}).
				Return(
					[]byte{
						0x90, 0x00,
					},
					nil,
				).Once().
				On(
					"Transmit",
					[]byte{
						0x00, 0xa4, 0x00, 0x01, 0x0a, 0x74, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x01,
					}).
				Return(
					[]byte{
						0x71, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
						0x76, 0x05, 0x08, 0x05, 0x9e, 0xb4, 0xea, 0x90, 0x00,
					},
					nil,
				).Once()

			client := &OATH{
				card:     testCard,
				Timestep: DefaultTimeStep,
				Clock: func() time.Time {
					return time.Unix(59, 0)
				},
			}

			err := client.Put("testvector", HmacSha1, Totp, 8, []byte("12345678901234567890"), false)
			assert.NoError(err)

			res, err := client.Calculate(test.Query, nil)
			assert.NoError(err)
			assert.Equal("94287082", res)

			testCard.AssertExpectations(t)
		})
	}

	t.Run("multiple match error", func(t *testing.T) {
		var (
			assert   = assert.New(t)
			testCard = new(testCard)
		)

		testCard.
			On(
				"Transmit",
				[]byte{
					0x00, 0x01, 0x00, 0x00, 0x25, 0x71, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x76,
					0x65, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x73, 0x16, 0x21, 0x08, 0x31, 0x32,
					0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
					0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
				}).
			Return(
				[]byte{
					0x90, 0x00,
				},
				nil,
			).Once().
			On(
				"Transmit",
				[]byte{
					0x00, 0x01, 0x00, 0x00, 0x25, 0x71, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x76,
					0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x73, 0x16, 0x21, 0x08, 0x31, 0x32,
					0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
					0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
				}).
			Return(
				[]byte{
					0x90, 0x00,
				},
				nil,
			).Once().
			On(
				"Transmit",
				[]byte{
					0x00, 0xa4, 0x00, 0x01, 0x0a, 0x74, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x01,
				}).
			Return(
				[]byte{
					0x71, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x31,
					0x76, 0x05, 0x08, 0x05, 0x9e, 0xb4, 0xea,
					0x71, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
					0x76, 0x05, 0x08, 0x05, 0x9e, 0xb4, 0xea,
					0x90, 0x00,
				},
				nil,
			).Once()

		client := &OATH{
			card:     testCard,
			Timestep: DefaultTimeStep,
			Clock: func() time.Time {
				return time.Unix(59, 0)
			},
		}

		err := client.Put("testvector1", HmacSha1, Totp, 8, []byte("12345678901234567890"), false)
		assert.NoError(err)

		err = client.Put("testvector2", HmacSha1, Totp, 8, []byte("12345678901234567890"), false)
		assert.NoError(err)

		_, err = client.Calculate("test", nil)
		assert.ErrorIs(err, errMultipleMatches)

		testCard.AssertExpectations(t)
	})
}
